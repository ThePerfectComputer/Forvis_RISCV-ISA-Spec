# We do not have fixed-width numbers in the Coq library
# yet, so for now, use unbounded numbers
rename type GHC.Integer.Type.Integer = Coq.Numbers.BinNums.Z
rename type GHC.Word.Word8 = Coq.Numbers.BinNums.N
rename type GHC.Word.Word16 = Coq.Numbers.BinNums.N
rename type GHC.Word.Word32 = Coq.Numbers.BinNums.N
rename type GHC.Word.Word64 = Coq.Numbers.BinNums.N
rename type GHC.Int.Int8 = Coq.Numbers.BinNums.Z
rename type GHC.Int.Int16 = Coq.Numbers.BinNums.Z
rename type GHC.Int.Int32 = Coq.Numbers.BinNums.Z
rename type GHC.Int.Int64 = Coq.Numbers.BinNums.Z

# These use Char-related functions that we don’t have
# (and hopefully don’t need)
skip Bit_Manipulation.read_vbin
skip Bit_Manipulation.read_vhex
skip Bit_Manipulation.read_hex

# this is of course just bandaids, and a demonstration of the 
# rewrite feature
rewrite forall x , GHC.Unicode.isAsciiUpper x = true
rewrite forall x , GHC.Unicode.isAsciiLower x = true

# In Coq, types and terms share a namespace, so lets rename
# all the constructors
rename value UART.UART_NS16550A = UART.Mk_UART_NS16550A
rename value MMIO.MMIO = MMIO.Mk_MMIO
rename value Memory.Mem = Memory.Mk_Mem
rename value Machine_State.Machine_State = Machine_State.Mk_Machine_State
rename value CSR_File.CSR_File = CSR_File.Mk_CSR_File
rename value GPR_File.GPR_File = GPR_File.Mk_GPR_File

# The error message in this function uses show, which we do not support.
# So lets simply remove the error message
in Memory.addr_byte_list_to_addr_word_list rewrite forall x, GHC.Err.error x = GHC.Err.undefined

# We could also remove all uses of show by replacing with a constant string.
rewrite forall x, GHC.Show.show x = (GHC.Base.hs_string__ "ELIDED_STRING")

# repeat does not work in Coq, no lazyness!
# But laziness is not needeed here, a simple map works as well
rewrite forall xs x, (GHC.List.zip xs (GHC.List.repeat x)) = (GHC.Base.map (fun y => pair y x) xs)


# These functions are not structurally recursive.
# Let us defer termination for now.
termination MMIO.mmio_write deferred
in CSR_File.print_CSR_File termination unflatten deferred

# hs-to-coq’s containers does not have the strict variant yet,
# but this should not make a semantic difference
rename value Data.Map.Strict.Internal.insert = Data.Map.Internal.insert
rename value Data.Map.Strict.Internal.fromList = Data.Map.Internal.fromList


# Axiomatization of IO-related functions
# see manual/IO.v

rename module System.IO IO
rename type GHC.Types.IO = IO.IO

rename value GHC.IO.Handle.hFlush = IO.hFlush 
rename value GHC.IO.Handle.FD.stdin = IO.stdin 
rename value GHC.IO.Handle.FD.stdout = IO.stdout
rename value GHC.IO.Handle.Text.hGetChar = IO.hGetChar
rename value GHC.IO.Handle.Text.hWaitForInput = IO.hWaitForInput
rename type GHC.IO.Handle.Types.Handle = IO.Handle

# more deferred termination
termination Run_Program.hGetLine_polled deferred
termination Run_Program.run_loop deferred
termination Main_Test_Virtual_Mem.do_tests deferred
